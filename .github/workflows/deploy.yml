# This is the name of your GitHub Actions workflow.
name: Deploy Chat Server to EC2 with Ansible

# This section defines when the workflow will run.
on:
  push:
    # IMPORTANT: Make sure this branch name matches your repository's default branch.
    branches:
      - master

jobs:
  # The 'build-and-push' job remains exactly the same.
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secure-chat-server:latest

  # The 'deploy' job is now updated to use the standard Ansible pattern.
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code again to access the playbook file.
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Install Ansible and its required Docker collection on the GitHub runner.
      - name: Install Ansible
        run: |
          pip install ansible
          ansible-galaxy collection install community.docker

      # Step 3: Run the Ansible playbook FROM the GitHub runner.
      - name: Run Ansible Playbook
        # We set an environment variable to disable SSH host key checking for simplicity in CI/CD.
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          # Create a temporary private key file for Ansible to use.
          # We securely echo the secret into a file and set the correct permissions.
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Run the ansible-playbook command directly on the runner.
          # -i: Specifies the inventory (the server to connect to). We pass the host and user directly.
          # --extra-vars: Passes the Docker Hub username as a variable to the playbook.
          ansible-playbook deploy_playbook.yml \
            -i "${{ secrets.EC2_HOST }}," \
            --user ${{ secrets.EC2_USERNAME }} \
            --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}"

