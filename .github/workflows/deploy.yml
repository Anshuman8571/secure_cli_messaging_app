# This is the name of your GitHub Actions workflow.
name: Deploy Chat Server to EC2 with Ansible

# This section defines when the workflow will run.
on:
  push:
    # IMPORTANT: Make sure this branch name matches your repository's default branch.
    branches:
      - master

jobs:
  # The 'build-and-push' job remains exactly the same.
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secure-chat-server:latest

  # The 'deploy' job is now updated to use Ansible.
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code again to access the playbook file.
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Install Ansible and its required collections on the GitHub runner.
      - name: Install Ansible
        run: |
          pip install ansible
          ansible-galaxy collection install community.docker

      # Step 3: Run the Ansible playbook on the EC2 instance.
      - name: Run Ansible Playbook
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # The script now just runs a single, clean command.
          script: |
            ansible-playbook deploy_playbook.yml --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}"

